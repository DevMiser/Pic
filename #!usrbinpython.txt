#!/usr/bin/python
# -*- coding: UTF-8 -*-

import sys
import sx126x
import threading
import time
import select
import termios
import tty
from threading import Timer

print("[DEBUG] Script started")

old_settings = termios.tcgetattr(sys.stdin)
tty.setcbreak(sys.stdin.fileno())

print("[DEBUG] Terminal settings configured")

# Need to disable the serial login shell and have to enable serial interface
# command `sudo raspi-config`

# When the LoRaHAT is attached to RPi, the M0 and M1 jumpers of HAT should be removed.

def get_cpu_temp():
    print("[DEBUG] Getting CPU temperature")
    try:
        tempFile = open("/sys/class/thermal/thermal_zone0/temp")
        cpu_temp = tempFile.read()
        tempFile.close()
        return float(cpu_temp)/1000
    except Exception as e:
        print(f"[DEBUG] ERROR: Failed to read CPU temperature: {str(e)}")
        return 0

print("[DEBUG] Initializing LoRa module")
print("[DEBUG] IMPORTANT: Using freq=915 for 915MHz module. If using different frequency, modify this line.")

try:
    # MODIFIED: Changed frequency from 868 to 915 to match your 915MHz module
    node = sx126x.sx126x(
        serial_num="/dev/ttyS0",
        freq=915,  # Changed from 868 to 915 for your module
        addr=0,
        power=22,
        rssi=True,
        air_speed=2400,
        relay=False
    )
    print("[DEBUG] LoRa module initialized successfully")
except Exception as e:
    print(f"[DEBUG] ERROR: Failed to initialize LoRa module: {str(e)}")
    sys.exit(1)

def send_deal():
    print("[DEBUG] Starting send_deal function")
    get_rec = ""
    print("")
    print("input a string such as \033[1;32m0,915,Hello World\033[0m,it will send `Hello World` to lora node device of address 0 with 915M ")
    print("please input and press Enter key:",end='',flush=True)
    
    while True:
        rec = sys.stdin.read(1)
        if rec != None:
            if rec == '\x0a': break
            get_rec += rec
            sys.stdout.write(rec)
            sys.stdout.flush()
    
    print(f"[DEBUG] User input: {get_rec}")
    get_t = get_rec.split(",")
    
    if len(get_t) < 3:
        print("[DEBUG] ERROR: Invalid input format. Expected: address,frequency,message")
        return
        
    try:
        offset_frequence = int(get_t[1])-(850 if int(get_t[1])>850 else 410)
        print(f"[DEBUG] Calculated frequency offset: {offset_frequence}")
        
        data = bytes([int(get_t[0])>>8]) + bytes([int(get_t[0])&0xff]) + bytes([offset_frequence]) + \
               bytes([node.addr>>8]) + bytes([node.addr&0xff]) + bytes([node.offset_freq]) + \
               get_t[2].encode()
        
        print(f"[DEBUG] Prepared data packet, length={len(data)}")
        node.send(data)
    except Exception as e:
        print(f"[DEBUG] ERROR in send_deal: {str(e)}")
    
    print('\x1b[2A',end='\r')
    print(" "*200)
    print(" "*200)
    print(" "*200)
    print('\x1b[3A',end='\r')

def send_cpu_continue(continue_or_not = True):
    print("[DEBUG] send_cpu_continue called")
    try:
        if continue_or_not:
            global timer_task
            global seconds
            
            # boarcast the cpu temperature at 915.125MHz
            cpu_temp = get_cpu_temp()
            print(f"[DEBUG] CPU Temperature: {cpu_temp}Â°C")
            
            data = bytes([255]) + bytes([255]) + bytes([65]) + bytes([255]) + bytes([255]) + bytes([65]) + \
                  "CPU Temperature:".encode() + str(cpu_temp).encode() + " C".encode()
            
            print(f"[DEBUG] Broadcasting CPU temperature, data length={len(data)}")
            node.send(data)
            time.sleep(0.2)
            
            timer_task = Timer(seconds, send_cpu_continue)
            timer_task.start()
            print(f"[DEBUG] Scheduled next CPU temperature broadcast in {seconds} seconds")
        else:
            cpu_temp = get_cpu_temp()
            data = bytes([255]) + bytes([255]) + bytes([65]) + bytes([255]) + bytes([255]) + bytes([65]) + \
                  "CPU Temperature:".encode() + str(cpu_temp).encode() + " C".encode()
            
            print("[DEBUG] Sending final CPU temperature broadcast")
            node.send(data)
            time.sleep(0.2)
            
            timer_task.cancel()
            print("[DEBUG] Timer task cancelled")
    except Exception as e:
        print(f"[DEBUG] ERROR in send_cpu_continue: {str(e)}")

try:
    time.sleep(1)
    print("Press \033[1;32mEsc\033[0m to exit")
    print("Press \033[1;32mi\033[0m to send")
    print("Press \033[1;32ms\033[0m to send cpu temperature every 10 seconds")
    
    # it will send rpi cpu temperature every 10 seconds
    seconds = 10
    
    while True:
        if select.select([sys.stdin], [], [], 0) == ([sys.stdin], [], []):
            c = sys.stdin.read(1)
            print(f"[DEBUG] Key pressed: {repr(c)}")
            
            # detect key Esc
            if c == '\x1b':
                print("[DEBUG] Esc key pressed, exiting")
                break
                
            # detect key i
            if c == '\x69':
                print("[DEBUG] 'i' key pressed, starting send operation")
                send_deal()
                
            # detect key s
            if c == '\x73':
                print("[DEBUG] 's' key pressed, starting CPU temperature broadcast")
                print("Press \033[1;32mc\033[0m to exit the send task")
                
                timer_task = Timer(seconds, send_cpu_continue)
                timer_task.start()
                print(f"[DEBUG] Started CPU temperature broadcast every {seconds} seconds")
                
                while True:
                    if sys.stdin.read(1) == '\x63':
                        print("[DEBUG] 'c' key pressed, stopping CPU temperature broadcast")
                        timer_task.cancel()
                        print('\x1b[1A',end='\r')
                        print(" "*100)
                        print('\x1b[1A',end='\r')
                        break
                        
        sys.stdout.flush()
        node.receive()
        
except Exception as e:
    print(f"[DEBUG] ERROR in main loop: {str(e)}")
finally:
    print("[DEBUG] Restoring terminal settings")
    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, old_settings)